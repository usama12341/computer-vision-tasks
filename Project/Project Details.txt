**# Real-Time Color Identifier System Using MATLAB**

## **1. Introduction**
Color detection is widely used in computer vision applications such as object tracking, image classification, and augmented reality. This project aims to develop a **real-time color identifier system** using MATLAB and a webcam. The system captures live video, detects the dominant color of an object in the center of the frame, and displays the corresponding color name.

## **2. Objectives**
- To implement a real-time color detection system.
- To process frames from a webcam and extract color information.
- To match the detected color with predefined color names.
- To display the detected color name dynamically on the screen.

## **3. Methodology**
### **3.1 System Workflow**
1. **Capture Video Frames**: The system continuously captures frames from the webcam.
2. **Extract Center Pixel Color**: The color of the pixel at the center of the frame is extracted.
3. **Color Matching**: The extracted color is compared with predefined color values.
4. **Display Results**: The detected color name is displayed on the screen.
5. **User Interaction**: The system runs until the user presses 'q' to exit.

### **3.2 Tools and Technologies**
- **Programming Language**: MATLAB
- **Hardware**: Webcam
- **Toolboxes Used**: Computer Vision Toolbox, Image Processing Toolbox

## **4. Code Explanation**
### **4.1 Initializing the Webcam**
```matlab
clc; clear; close all;
cam = webcam;
```
This section initializes the webcam and clears previous variables.

### **4.2 Defining Predefined Colors**
```matlab
colors = struct('Red', [255, 0, 0], ...
                'Green', [0, 255, 0], ...
                'Blue', [0, 0, 255], ...
                'Yellow', [255, 255, 0], ...
                'Cyan', [0, 255, 255], ...
                'Magenta', [255, 0, 255], ...
                'Black', [0, 0, 0], ...
                'White', [255, 255, 255], ...
                'Gray', [128, 128, 128], ...
                'Orange', [255, 165, 0], ...
                'Purple', [128, 0, 128]);
```
This structure holds predefined color names and their corresponding RGB values.

### **4.3 Capturing and Processing Video Frames**
```matlab
figure;
while true
    img = snapshot(cam);
    [rows, cols, ~] = size(img);
    centerX = round(cols / 2);
    centerY = round(rows / 2);
    centerPixel = double(squeeze(img(centerY, centerX, :)))';
```
- The webcam captures frames continuously.
- The center pixel of the frame is extracted for color analysis.

### **4.4 Finding the Closest Color**
```matlab
    minDist = inf;
    detectedColor = 'Unknown';
    for i = 1:length(fieldnames(colors))
        colorValue = colors.(fieldnames(colors){i});
        dist = norm(centerPixel - colorValue);
        if dist < minDist
            minDist = dist;
            detectedColor = fieldnames(colors){i};
        end
    end
```
- The Euclidean distance formula is used to compare the detected color with predefined colors.
- The closest matching color is selected and stored in `detectedColor`.

### **4.5 Displaying Results**
```matlab
    imshow(img);
    hold on;
    rectangle('Position', [centerX-10, centerY-10, 20, 20], 'EdgeColor', 'white', 'LineWidth', 2);
    text(20, 50, ['Detected Color: ', detectedColor], 'Color', 'white', 'FontSize', 16, 'FontWeight', 'bold', 'BackgroundColor', 'black');
    hold off;
```
- The video is displayed in a figure window.
- A small white rectangle is drawn around the center pixel.
- The detected color name is shown at the top left of the screen.

### **4.6 User Exit Control**
```matlab
    if waitforbuttonpress
        key = get(gcf, 'CurrentCharacter');
        if key == 'q'
            break;
        end
    end
end

clear cam;
close;
```
- The program waits for a keyboard press.
- If the user presses **'q'**, the program exits.
- The webcam is released, and the figure window is closed.

## **5. System Requirements**
- **MATLAB Version**: R2020a or newer
- **Required Toolboxes**:
  - Computer Vision Toolbox
  - Image Processing Toolbox (optional but recommended)
- **Webcam Support Package** (install using `matlab.addons.install('MATLAB Support Package for USB Webcams')` if required)
- **A Working Webcam**

## **6. Results**
- The system successfully identifies the dominant color in real time.
- The detected color is displayed with minimal delay.
- Works with various lighting conditions but performs best under uniform lighting.

## **7. Future Improvements**
- **Increase Accuracy**: Implement advanced color difference formulas like **CIE76 or CIEDE2000**.
- **Expand Detection Area**: Instead of a single pixel, analyze an average of multiple pixels.
- **Improve UI**: Show a small color patch displaying the detected color.
- **Add Sound Alerts**: Play a voice alert when detecting a specific color.

## **8. Conclusion**
This MATLAB-based **Real-Time Color Identifier System** provides an efficient method for recognizing colors in a live video stream. By extracting the center pixelâ€™s RGB values and comparing them to predefined colors, the system accurately labels colors in real time. This project can be extended for applications such as **object tracking, quality control, and accessibility tools for color-blind individuals**.

---
### **9. References**
1. MathWorks Documentation: [https://www.mathworks.com/help/](https://www.mathworks.com/help/)
2. Computer Vision Toolbox: [https://www.mathworks.com/products/computer-vision.html](https://www.mathworks.com/products/computer-vision.html)
3. Image Processing Toolbox: [https://www.mathworks.com/products/image.html](https://www.mathworks.com/products/image.html)

---
This documentation provides a clear understanding of the **Real-Time Color Identifier System** and can be used as a reference for your **Final Year Project Report**. Let me know if you need any modifications! ðŸš€

